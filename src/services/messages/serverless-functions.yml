httpMessageApi:
  handler: src/services/messages/api/main.handler
  name: ${self:service.name}-messageApi
  description: Message API endpoint
  events:
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: ANY
        path: /api/v1/message/{proxy+}
httpMessagesList:
  handler: src/services/messages/httpMessagesList.handler
  name: ${self:service.name}-messagesList
  description: Query a list of messages
  events:
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: get
        path: /api/v1/messages/sendAt
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: get
        path: /api/v1/messages/sendAt/{date}
        request:
          parameters:
            paths:
              date: true
httpMessagesPublisher:
  handler: src/services/messages/httpMessagesPublisher.handler
  name: ${self:service.name}-messagesPublisher
  description: Posts API calls to the SNS topic for lambda subscribers to act upon.
  environment:
    SNS_TOPIC_ARN: !Ref apiSnsTopic
  events:
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: post
        path: /api/v1/messages/action/{action}
        request:
          parameters:
            paths:
              action: true
snsMessagesCreate:
  handler: src/services/messages/snsMessagesCreate.handler
  name: ${self:service.name}-messagesCreate
  description:
    !Join [' ', ['Listens to SNS Topic', !GetAtt apiSnsTopic.TopicName, 'to create new Messages.']]
  environment:
    SQS_PROCESS_MESSAGE_QUEUE_NAME: !GetAtt messagesSqsQueue.QueueName
    SQS_ERROR_MESSAGE_QUEUE_NAME: !GetAtt messageErrorsSqsQueue.QueueName
  events:
    - sns:
        arn: !Ref apiSnsTopic
        topicName: ${self:service.name}-api # sadly, this has to be a string and can't be !GetAtt due to a bug, see https://github.com/serverless/serverless/issues/3824#issuecomment-436533656
        filterPolicy:
          action:
            - /api/v1/messages/action/create
snsMessagesProcess:
  handler: src/services/messages/snsMessagesProcess.handler
  name: ${self:service.name}-messagesProcess
  description:
    !Join [
      ' ',
      [
        'Listens to SNS Topic',
        !GetAtt apiSnsTopic.TopicName,
        'to initiate processing any Messages ready to be sent.',
      ],
    ]
  environment:
    SQS_PROCESS_MESSAGE_QUEUE_NAME: !GetAtt messagesSqsQueue.QueueName
  events:
    - sns:
        arn: !Ref apiSnsTopic
        topicName: ${self:service.name}-api # sadly, this has to be a string and can't be !GetAtt due to a bug, see https://github.com/serverless/serverless/issues/3824#issuecomment-436533656
        filterPolicy:
          action:
            - /api/v1/messages/action/process
sqsMessageExecuteStateMachine:
  handler: src/services/messages/sqsMessageExecuteStateMachine.handler
  name: ${self:service.name}-messageExecuteStateMachine
  description:
    !Join [' ', ['Listens to SQS Queue', !GetAtt messagesSqsQueue.QueueName, 'to send a Message.']]
  environment:
    SQS_ERROR_MESSAGE_QUEUE_NAME: !GetAtt messageErrorsSqsQueue.QueueName
    MESSAGE_STATE_MACHINE_ARN:
      !Join [
        ':',
        [
          'arn:aws:states',
          !Ref AWS::Region,
          !Ref AWS::AccountId,
          'stateMachine:${self:service.name}-messageStateMachine',
        ],
      ]
  events:
    - sqs:
        arn: !GetAtt messagesSqsQueue.Arn
        batchSize: 1

stepCreateUserMessage:
  handler: src/services/messages/stateMachine/stepCreateUserMessage.handler
  name: ${self:service.name}-messageCreateUserMessage
  timeout: 300
  environment:
    SQS_PROCESS_USER_MESSAGE_QUEUE_NAME: !GetAtt userMessagesSqsQueue.QueueName
    SQS_ERROR_MESSAGE_QUEUE_NAME: !GetAtt messageErrorsSqsQueue.QueueName

stepFailState:
  handler: src/services/messages/stateMachine/stepFailState.handler
  name: ${self:service.name}-messageFailState

stepGetChannels:
  handler: src/services/messages/stateMachine/stepGetChannels.handler
  name: ${self:service.name}-messageGetChannels

stepGetUserPopulation:
  handler: src/services/messages/stateMachine/stepGetUserPopulation.handler
  name: ${self:service.name}-messageGetUserPopulation
  timeout: 300
  environment:
    GROUPER_HOST: ${env:GROUPER_HOST}
    GROUPER_USERNAME: ${env:GROUPER_USERNAME}
    GROUPER_PASSWORD: ${env:GROUPER_PASSWORD}

cronInvokeMessageProcess:
  handler: src/services/messages/cronInvokeMessageProcess.handler
  description: 'Lambda that fires off post to the API to initiate processing messages ready to be sent'
  environment:
    API_KEY: '${env:AWS_APIGW_API_KEY}${file(./src/serverless.js):developerSuffix}'
    APP_URL: 'https://${file(./src/serverless.js):developerPrefix}${env:AWS_CLOUDFRONT_ALIAS}/api/v1/messages/action/process'
  events:
    - schedule:
        name: ${self:service.name}-cronInvokeMessageProcess
        description: 'Trigger cronInvokeMessageProcess lambda every minute'
        rate: rate(1 minute)
        enabled: true
