name: ${self:service.name}-messageStateMachine
id: messageStateMachine
type: STANDARD
loggingConfig:
  level: ALL
  includeExecutionData: true
  destinations:
    - !GetAtt messageStateMachineLogGroup.Arn
definition:
  Comment: 'Processing a Message to get its target population and create new UserMessage records.'
  StartAt: Process
  States:
    Process:
      Type: Parallel
      Comment: 'Adds Parallel task results to original data; { processedQueries:{ users: [],channels: [] } }'
      Next: CreateUserMessage
      ResultPath: '$.processedQueries'
      Branches:
        - StartAt: GetUserPopulation
          States:
            GetUserPopulation:
              Type: Task
              Comment: 'Branch returns only its data (users:[]) to parent parallel state for inclusion'
              Resource: !GetAtt stepGetUserPopulation.Arn
              HeartbeatSeconds: 30
              ResultPath: '$'
              Retry:
                - ErrorEquals:
                    [
                      'States.Timeout',
                      'Lambda.ServiceException',
                      'Lambda.AWSLambdaException',
                      'Lambda.SdkClientException',
                    ]
                  IntervalSeconds: 1
                  BackoffRate: 2
                  MaxAttempts: 2
              Catch:
                - ErrorEquals: ['States.ALL']
                  ResultPath: '$.error'
                  Next: CatchAllFallback
              End: true
            CatchAllFallback:
              Type: Task
              Next: FailState
              Comment: 'Handle a failed execution'
              Resource: !GetAtt stepFailState.Arn
              HeartbeatSeconds: 30
            FailState:
              Type: Fail
        - StartAt: GetChannels
          States:
            GetChannels:
              Type: Task
              Comment: 'Branch returns only its data (channels:[]) to parent parallel state for inclusion'
              Resource: !GetAtt stepGetChannels.Arn
              ResultPath: '$'
              End: true
    CreateUserMessage:
      Type: Task
      Comment: 'Given the Message and { processedQueries: { s3Data: { bucket:<string>, key:<string> }, channels: [] } found in upstream processing, create a new UserMessage for each and publish to the SQS Queue.'
      Resource: !GetAtt stepCreateUserMessage.Arn
      Next: SucceedState
    SucceedState:
      Type: Succeed
