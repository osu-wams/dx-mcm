httpUserMessagesList:
  handler: src/services/userMessages/httpUserMessagesList.handler
  name: ${self:service.name}-userMessagesList
  description: Query a list of user messages
  events:
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: get
        path: /api/v1/userMessages/channel/{channelId}/{osuId}
        request:
          parameters:
            paths:
              channelId: true
              osuId: true
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: get
        path: /api/v1/userMessages/channel/{channelId}/{osuId}/{lastKey}
        request:
          parameters:
            paths:
              channelId: true
              osuId: true
              lastKey: true
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: get
        path: /api/v1/userMessages/user/{osuId}
        request:
          parameters:
            paths:
              osuId: true
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: get
        path: /api/v1/userMessages/user/{osuId}/{lastKey}
        request:
          parameters:
            paths:
              osuId: true
              lastKey: true

httpUserMessageRead:
  handler: src/services/userMessages/httpUserMessageRead.handler
  name: ${self:service.name}-userMessageRead
  description: Mark a user message as being read for a user
  events:
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: get
        path: /api/v1/userMessages/read/{channelId}/{messageId}/{osuId}
        request:
          parameters:
            paths:
              channelId: true
              messageId: true
              osuId: true

sqsUserMessageProcessor:
  handler: src/services/userMessages/sqsUserMessageProcessor.handler
  name: ${self:service.name}-userMessageProcessor
  description:
    !Join [
      ' ',
      [
        'Listens to SQS Queue',
        !GetAtt messagesSqsQueue.QueueName,
        'to deliver a UserMessage to its intended Channel.',
      ],
    ]
  environment:
    USER_MESSAGE_STATE_MACHINE_ARN:
      !Join [
        ':',
        [
          'arn:aws:states',
          !Ref AWS::Region,
          !Ref AWS::AccountId,
          'stateMachine:${self:service.name}-userMessageStateMachine',
        ],
      ]
  events:
    - sqs:
        arn: !GetAtt userMessagesSqsQueue.Arn
        batchSize: 1

stepGetUserPreferences:
  handler: src/services/userMessages/stepGetUserPreferences.handler
  name: ${self:service.name}-getUserPreferences

stepApplyFlowControl:
  handler: src/services/userMessages/stepApplyFlowControl.handler
  name: ${self:service.name}-applyFlowControl

stepPublishUserMessage:
  handler: src/services/userMessages/stepPublishUserMessage.handler
  name: ${self:service.name}-publishUserMessage
  timeout: 300
  environment:
    SQS_ERROR_USER_MESSAGE_QUEUE_NAME: !GetAtt userMessageErrorsSqsQueue.QueueName
