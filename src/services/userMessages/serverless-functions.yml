httpUserMessageApi:
  handler: src/services/userMessages/api/main.handler
  name: ${self:service}-userMessageApi
  description: UserMessage API endpoint
  events:
    - http:
        private: true # forces header x-api-key to be present with a valid key from provider.apiKeys
        method: ANY
        path: /api/v1/userMessages/{proxy+}

sqsUserMessageProcessor:
  handler: src/services/userMessages/sqsUserMessageProcessor.handler
  name: ${self:service}-userMessageProcessor
  description: ${self:service}-messages.fifo
  environment:
    USER_MESSAGE_STATE_MACHINE_ARN:
      !Join [
        ':',
        [
          'arn:aws:states',
          !Ref AWS::Region,
          !Ref AWS::AccountId,
          'stateMachine:${self:service}-userMessageStateMachine',
        ],
      ]
  events:
    - sqs:
        arn: !GetAtt userMessagesSqsQueue.Arn
        batchSize: 1

stepGetUserPreferences:
  handler: src/services/userMessages/stepGetUserPreferences.handler
  name: ${self:service}-getUserPreferences

stepApplyFlowControl:
  handler: src/services/userMessages/stepApplyFlowControl.handler
  name: ${self:service}-applyFlowControl

stepPublishUserMessage:
  handler: src/services/userMessages/stepPublishUserMessage.handler
  name: ${self:service}-publishUserMessage
  timeout: 300
  environment:
    SQS_ERROR_USER_MESSAGE_QUEUE_NAME: !GetAtt userMessageErrorsSqsQueue.QueueName

cronUserMessagePendingMonitor:
  handler: src/services/userMessages/cronUserMessagePendingMonitor.handler
  name: ${self:service}-cronUserMessagePendingMonitor
  description: Scheduled Lambda to identify and send notifications about UserMessages that failed while trying to deliver.
  environment:
    DX_ALERTS_TEAMS_HOOK: ${env:DX_ALERTS_TEAMS_HOOK}
    PENDING_MIN_AGO: 15
  events:
    - schedule:
        name: ${self:service}-cronUserMessagePendingMonitor
        description: Trigger the cronUserMessagePendingMonitor repeatedly
        rate: rate(15 minutes)
        enabled: true
