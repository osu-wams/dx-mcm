service:
  name: osu-dx-mcm-${opt:stage, 'development'}${file(./src/serverless.js):developerSuffix}
  description: OSU DX Multi-Channel Messaging Stack

package:
  individually: true
  exclude:
    - .git/**

plugins:
  - serverless-dotenv-plugin
  - serverless-s3-sync
  - serverless-pseudo-parameters
  - serverless-step-functions
  - serverless-webpack
  - serverless-plugin-stack-outputs

custom: ${file(./serverless-custom.yml)}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'us-west-2'}
  stackName: ${self:service.name}
  deploymentBucket:
    name: osu-dx-mcm-deployments
    blockPublicAccess: true
  deploymentPrefix: ${self:service.name}
  environment:
    ENV: ${env:ENV}
    SERVICE_NAME: ${self:service.name}
  apiKeys:
    - name: ${self:service.name}-api-key # .env.{stage} file contains the API key
      value: ${env:AWS_APIGW_API_KEY}${file(./src/serverless.js):developerSuffix} # ensure a unique key when using a developer stack
  tracing: ${file(./serverless.config.${opt:stage, 'development'}.yml):provider.tracing}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: !Ref apiSnsTopic
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        - !GetAtt messagesTable.Arn
        - !Join ['', [!GetAtt messagesTable.Arn, '/index/${self:service.name}-MessageStatuses']]
        - !Join ['', [!GetAtt messagesTable.Arn, '/index/${self:service.name}-MessageByHash']]
        - !GetAtt userMessagesTable.Arn
        - !Join [
            '',
            [!GetAtt userMessagesTable.Arn, '/index/${self:service.name}-UserMessageStatuses'],
          ]
        - !Join [
            '',
            [!GetAtt userMessagesTable.Arn, '/index/${self:service.name}-UserMessageByChannel'],
          ]
        - !Join [
            '',
            [!GetAtt userMessagesTable.Arn, '/index/${self:service.name}-UserMessageBySendAt'],
          ]
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
        - sqs:GetQueueAttributes
      Resource:
        - !GetAtt messagesSqsQueue.Arn
        - !GetAtt messageErrorsSqsQueue.Arn
        - !GetAtt userMessagesSqsQueue.Arn
    - Effect: Allow
      Action:
        - logs:CreateLogDelivery
        - logs:GetLogDelivery
        - logs:UpdateLogDelivery
        - logs:DeleteLogDelivery
        - logs:ListLogDeliveries
        - logs:PutResourcePolicy
        - logs:DescribeResourcePolicies
        - logs:DescribeLogGroups
        - states:StartExecution
      Resource:
        - !Join [':', ['arn:aws:states', !Ref AWS::Region, !Ref AWS::AccountId, 'stateMachine:*']]

  apiGateway:
    apiKeySourceType: HEADER
    description: OSU DX Multi-Channel Messaging API
  apiName: ${self:service.name}
  usagePlan: ${file(./serverless.config.${opt:stage, 'development'}.yml):provider.usagePlan}

stepFunctions:
  stateMachines:
    messageStateMachine: ${file(./src/services/messages/serverless-state-machine.yml)}
    userMessageStateMachine: ${file(./src/services/userMessages/serverless-state-machine.yml)}

functions:
  - ${file(./src/services/messages/serverless-functions.yml)}
  - ${file(./src/services/userMessages/serverless-functions.yml)}

resources:
  Resources:
    apiSnsTopic: ${file(./serverless-resources.yml):apiSnsTopic}
    apiCloudFront: ${file(./serverless-resources.yml):apiCloudFront}
    messagesTable: ${file(./serverless-resources.yml):messagesTable}
    userMessagesTable: ${file(./serverless-resources.yml):userMessagesTable}
    staticBucket: ${file(./serverless-resources.yml):staticBucket}
    messagesSqsQueue: ${file(./src/services/messages/serverless-resources.yml):messagesSqsQueue}
    messageErrorsSqsQueue: ${file(./src/services/messages/serverless-resources.yml):messageErrorsSqsQueue}
    messageStateMachineLogGroup: ${file(./src/services/messages/serverless-resources.yml):messageStateMachineLogGroup}
    userMessagesSqsQueue: ${file(./src/services/userMessages/serverless-resources.yml):userMessagesSqsQueue}
    userMessageStateMachineLogGroup: ${file(./src/services/userMessages/serverless-resources.yml):userMessageStateMachineLogGroup}
  Outputs:
    CloudFrontDistribution:
      Description: URL to the API for testing or DNS CName
      Value: !Join ['', ['https://', !GetAtt apiCloudFront.DomainName]]
